func realloc<PtrType>(ptr:$PtrType, new_size:i32) ~> $PtrType {
    return libc_realloc(ptr:$i8, sizeof $PtrType * new_size:i64):$PtrType;
}
func malloc<PtrType>(size:i32) ~> $PtrType {
    return libc_malloc(sizeof PtrType * size:i64):$PtrType;
}
func free<PtrType>(ptr:$PtrType) {
    libc_free(ptr:$i8);
    return;
}

struct Vector<ItemType> {
    data:$ItemType;
    capacity:i32;
    length:i32;

    func init(self:$Vector<ItemType>) {
        self.data = malloc?<ItemType>(1);
        self.capacity = 1;
        self.length = 0;
        return;
    }

    func push(self:$Vector<ItemType>, item:ItemType) {
        ($self.data)[$self.length] = item;
        
        self.length = $self.length + 1;
        
        if $self.length == $self.capacity {
            self.capacity = $self.capacity * 2;
        }
        
        self.data = realloc?<ItemType>($self.data, $self.capacity);
        return;
    }

    func pop(self:$Vector<ItemType>) {
        self.length = $self.length - 1;
        self.capacity = $self.length;
        self.data = realloc?<ItemType>($self.data, $self.capacity);
        return;
    }
    
    func get(self:$Vector<ItemType>, index:i32) ~> ItemType {
        return $(($self.data)[index]);
    }
    func top(self:$Vector<ItemType>) ~> ItemType {
        return $(($self.data)[$self.length-1]);
    }

    func del(self:$Vector<ItemType>) {
        free?<ItemType>($self.data);
        return;
    }
}

struct String {
    data:Vector<c8>;
    length:i32;
    func new(self:$String, new_str:$c8) {
        self.data.init();
        
        let character:c8;
        character = $new_str;

        let index = 0;

        self.length = 0;
        
        while $character != 0 {
            self.data.push($character);
            index = $index + 1;
            character = $(new_str[$index]);
        }

        self.length = $index + 1;
        return;
    }
    func push(self:$String, char:c8) {
        self.data.push(char);
        self.length = $self.data.length;
        return;
    }
    func get_ptr(self:$String) ~> $c8 {
        return $self.data.data;
    }
    func del(self:$String) {
        self.data.del();
        return;
    }
}

func print(msg:$String) {
    let index = 0;
    while $index != $msg.length {
        libc_putchar($(($msg.data.data)[$index]));
        index = $index + 1;
    }
    libc_putchar(10);
    return;
}

func input() ~> String {
    let char:c8;
    let _input:String;
    _input.new("":$c8);
    while $(char = libc_getchar();) != 10 {
        _input.push($char);
    }

    return $_input;
}

export func test(num: i32) ~> i32 {
    let my_str:String;
    
    my_str = input();
    
    print(my_str);

    my_str.del();
    
    return 0;
}