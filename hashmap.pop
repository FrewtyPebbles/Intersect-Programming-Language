func realloc<PtrType>(ptr:$PtrType, new_size:i32) ~> $PtrType {
    return libc_realloc(ptr:$i8, sizeof $PtrType * new_size:i64):$PtrType;
}
func malloc<PtrType>(size:i32) ~> $PtrType {
    return libc_malloc(sizeof PtrType * size:i64):$PtrType;
}
func free<PtrType>(ptr:$PtrType) {
    libc_free(ptr:$i8);
    return;
}

struct Vector<ItemType> {
    data:$ItemType;
    capacity:i32;
    length:i32;

    func init(self:$Vector<ItemType>) {
        self.data = malloc?<ItemType>(1);
        self.capacity = 1;
        self.length = 0;
        return;
    }

    func push(self:$Vector<ItemType>, item:ItemType) {
        ($self.data)[$self.length] = item;
        
        self.length = $self.length + 1;
        
        if $self.length == $self.capacity {
            self.capacity = $self.capacity * 2;
        }
        
        self.data = realloc?<ItemType>($self.data, $self.capacity);
        return;
    }

    func pop(self:$Vector<ItemType>) {
        self.length = $self.length - 1;
        self.capacity = $self.length;
        self.data = realloc?<ItemType>($self.data, $self.capacity);
        return;
    }
    
    func get(self:$Vector<ItemType>, index:i32) ~> ItemType {
        return $(($self.data)[index]);
    }
    func top(self:$Vector<ItemType>) ~> ItemType {
        return $(($self.data)[$self.length-1]);
    }

    func del(self:$Vector<ItemType>) {
        free?<ItemType>($self.data);
        return;
    }
}

export func test(num: i32) ~> i32 {
    let vec:Vector<i32>;

    vec.init();
    libc_printf("Init called.\n\n":$c8);


    while $vec.length != 100 {
        vec.push(num * );
    }
    

    if $vec.length < 3 {
        libc_printf("2 pushed data: %i, %i\n":$c8, vec.get(0), vec.get(1));
    }
    elif $vec.length == 3 {
        libc_printf("3 pushed data: %i, %i, %i\n":$c8, vec.get(0), vec.get(1), vec.get(2));
    }
    else {
        libc_printf("more than 4 pushed data: %i, %i, %i, %i...\n":$c8, vec.get(0), vec.get(1), vec.get(2), vec.get(3));
    } 

    libc_printf("\n":$c8);

    libc_printf("vector top: %i\n":$c8, vec.top());

    libc_printf("capacity: %i\n":$c8, $vec.capacity);

    vec.del();
    libc_printf("\nend\n":$c8);

    return 0;
}