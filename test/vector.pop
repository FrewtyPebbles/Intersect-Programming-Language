func realloc<PtrType>(ptr:$PtrType, new_size:i32) ~> $PtrType {
    "This is a wrapper arround libc_realloc."
    return libc_realloc(ptr:$i8, sizeof $PtrType * new_size:i64):$PtrType;
}
func malloc<PtrType>(size:i32) ~> $PtrType {
    "This is a wrapper arround libc_malloc."
    return libc_malloc(sizeof PtrType * size:i64):$PtrType;
}
func free<PtrType>(ptr:$PtrType) {
    "This is a wrapper arround libc_free."
    libc_free(ptr:$i8);
    return;
}

struct Vector<ItemType> {
    "This is an implementation of a variable length heterogenious array."
    data:$ItemType;
    capacity:i32;
    length:i32;

    func init(self:$Vector<ItemType>) {
        "Allocates the vector."
        self.data = malloc?<ItemType>(1);
        self.capacity = 1;
        self.length = 0;
        return;
    }

    func push(self:$Vector<ItemType>, item:ItemType) {
        "Pushes an item to the vector."
        self.data[self.length] = item;
        
        self.length = self.length + 1;
        
        if self.length == self.capacity {
            self.capacity = self.capacity * 2;
        }
        
        self.data = realloc?<ItemType>(self.data, self.capacity);
        return;
    }

    func pop(self:$Vector<ItemType>) {
        "Pops an item from the end of the vector."
        self.length = self.length - 1;
        self.capacity = self.length;
        self.data = realloc?<ItemType>(self.data, self.capacity);
        return;
    }
    
    func get(self:$Vector<ItemType>, index:i32) ~> ItemType {
        "Returns an item from the vector."
        return self.data[index];
    }
    func top(self:$Vector<ItemType>) ~> ItemType {
        "Returns the end item of the vector."
        return self.data[self.length-1];
    }

    func del(self:$Vector<ItemType>) {
        "Frees the vector."
        free?<ItemType>(self.data);
        return;
    }
}

export func main(num: i32) ~> i32 {
    let vec:Vector<i32>;

    vec.init();
    libc_printf("Init called.\n":$c8);

    let index = 0;
    while vec.length != 9999999 {
        vec.push(index);
        index = index + 1;
    }

    libc_printf("pushed data: %i, %i, %i\n":$c8, vec.get(0), vec.get(1), vec.get(2));


    libc_printf("vector top: %i\n":$c8, vec.top());

    libc_printf("capacity: %i\n":$c8, vec.capacity);

    vec.del();
    libc_printf("end.\n":$c8);

    return 0;
}