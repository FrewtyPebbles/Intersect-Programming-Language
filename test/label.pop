func realloc<PtrType>(ptr:$PtrType, new_size:i32) ~> $PtrType {
    "This is a wrapper arround libc_realloc."
    return libc_realloc(ptr:$i8, sizeof $PtrType * new_size:i64):$PtrType;
}

func malloc<PtrType>(size:i32) ~> $PtrType {
    "This is a wrapper arround libc_malloc."
    return libc_malloc(sizeof PtrType * size:i64):$PtrType;
}

func free<PtrType>(ptr:$PtrType) {
    "This is a wrapper arround libc_free."
    libc_free(ptr:$i8);
    return;
}

struct PStatement<Test> {
    string:[$Test x 6];


    func print(self:$PStatement<Test>, num:i32) {
        libc_printf(self.string[num]); # this function is not closing in context_call
        return;
    }

}

export func main(num: i32) ~> i32 {
    let ps:PStatement<c8>;
    ps.string[0] = "hello 0 and 3\n":$c8;
    ps.string[1] = "hello 1\n":$c8;
    ps.string[2] = "hello 2\n":$c8;
    ps.string[3] = ps.string[0];
    ps.string[4] = "hello 4\n":$c8;
    ps.string[5] = "hello 5\n":$c8;
    ps.print(0);
    ps.print(1);
    ps.print(2);
    ps.print(3);
    ps.print(4);
    ps.print(5);
    
    return 0;
}