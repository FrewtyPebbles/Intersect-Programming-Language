func realloc<PtrType>(ptr:$PtrType, new_size:i64, old_size:i64) ~> $PtrType {
    let new_pointer = libc_malloc(new_size):$PtrType;
    libc_memcpy(new_pointer:$i8, ptr:$i8, old_size);
    libc_free(ptr:$i8);
    return new_pointer;
}

struct Vector<ItemType> {
    data:$ItemType;
    length:i32;

    func init(self:$Vector<ItemType>) {
        self.data = libc_malloc(sizeof $ItemType):$ItemType;
        self.length = 0;
        return;
    }

    func push(self:$Vector<ItemType>, item:ItemType) {
        self.length = $self.length + 1;
        
        self.data = realloc?<ItemType>($self.data, sizeof $ItemType  * $self.length:i64, sizeof $ItemType  * ($self.length - 1):i64);

        $self.data[$self.length - 1] = item;
        return;
    }
    
    func get(self:$Vector<ItemType>, index:i32) ~> ItemType {
        return $$self.data[index];
    }

    func del(self:$Vector<ItemType>) {
        libc_free($self.data:$i8);
        return;
    }
}


export func test(num: i32) ~> i32 {
    let vec:Vector<i32>;

    vec.init();
    libc_printf("Init called.\n":$c8);

    vec.push(10);
    libc_printf("Push called.\n":$c8);
    vec.push(7878);
    libc_printf("Push called.\n":$c8);
    vec.push(26);
    libc_printf("Push called.\n":$c8);
    

    libc_printf("pushed data: %i, %i, %i\n":$c8, vec.get(0), vec.get(1), vec.get(2));
    libc_printf("get called.\n":$c8);
    vec.del();
    libc_printf("Del called.\n":$c8);
    return 1;
}