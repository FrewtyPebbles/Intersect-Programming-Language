func realloc<PtrType>(ptr:$PtrType, new_size:i32) ~> $PtrType {
    return libc_realloc(ptr:$i8, sizeof $PtrType * new_size:i64):$PtrType;
}
func malloc<PtrType>(size:i32) ~> $PtrType {
    return libc_malloc(sizeof $i8 * size:i64):$PtrType;
}
func free<PtrType>(ptr:$PtrType) {
    libc_free(ptr:$i8);
    return;
}

struct Node<DType>{
    data:DType;
    next:$Node<DType>;

    func display(self:$Node<DType>) {
        libc_printf("node_value: %i\n":$c8, $self.data);
        return;
    }
}

export func test(num: i32) ~> i32 {
    
    let first:Node<i32>;

    let second:Node<i32>;
    
    first.data = 1;

    second.data = 2;

    first.next = second;

    second.next = first;

    first.display();
    ($(($first.next).next)).display();

    return 0;
}

